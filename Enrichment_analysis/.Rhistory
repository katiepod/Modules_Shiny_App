plotOutput("enrichment.plot"),
plotOutput("assignment.plot"))
)
)
server <- function(input, output) {
SUBSETTED <- eventReactive(input$go, {
query <- gsub("\\s", "", input$text) # input$text is a string; remove all types of white spaces
query <- strsplit(query,",")[[1]] # split this string based on "," and output the char. vector
if(length(query)==0){
inFile <- input$file1
query <- as.matrix(read.table(inFile$datapath, sep = "\t", header=T))
if (dim(query)[2]>=2){query <- as.character(query[,1])}
}
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
subsetted <- data.frame()
for (i in 1: length(query)){
if (nrow(subset(conversionTable, WormBase.ID ==query[i])) !=0)
{a <- subset(conversionTable, WormBase.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,a)
}
if (nrow(subset(conversionTable, Public.Gene.Name ==query[i])) !=0)
{b <- subset(conversionTable, Public.Gene.Name ==query[i])[,1:4]
subsetted <- rbind(subsetted,b)
}
if (nrow(subset(conversionTable, Sequence.ID ==query[i])) !=0)
{c <- subset(conversionTable, Sequence.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
if (nrow(subset(conversionTable, Affy.Probe.Set.ID ==query[i])) !=0)
{c <- subset(conversionTable, Affy.Probe.Set.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
}
subsetted <- droplevels.data.frame(subsetted)
subsetted <- unique.data.frame(subsetted)
})
output$query.genes <- renderTable({
query.genes <- SUBSETTED()
query.genes <- query.genes[,2:4]
colnames(query.genes) <- c("Gene", "Sequence","Probeset")
row.names(query.genes) <- NULL
query.genes
},
caption="Genes (i.e. unique probeset IDs) used in analysis",caption.placement = getOption("xtable.caption.placement", "top")
)
output$enrichment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
# Calculate the 4 parameters needed for hypergeometric test
hitInSamplePerMod <- sapply(S.class.subset.by.query, function(x) sum(abs(x)))
hitInPopPerMod <- sapply(S.class, function(x) sum(abs(x)))
failInPopPerMod <- sapply(S.class, function(x) nrow(S.class)-sum(abs(x)))
hypergeomTablePerMod <- as.data.frame(rbind(hitInSamplePerMod, hitInPopPerMod, failInPopPerMod))
# Perform hypergeometric test for enrichment of modules genes within the query gene list
# Arguments for phyper: phyper(hits in sample, hits in population, fails in population, sample size)
pValues <- as.data.frame(sapply(hypergeomTablePerMod, function(x)
phyper(x[1]-1, x[2], x[3], length(probeSets), lower.tail= FALSE)
))
colnames(pValues) <- "p_value"
# Adjust p-value due to multiple hypothesis testing
adj.pValues <- p.adjust(pValues[,1], "BH")
pValues$BH_p_value <- adj.pValues
# Format the p-value table for plotting
pValues$NegLog10P <- -log(pValues$BH_p_value,10)
pValues$Module <- rownames(pValues)
pValues$Module <- gsub("^.{1}","", pValues$Module)
pValues$Module <- as.numeric(pValues$Module)
pValues <- pValues[order(pValues$Module),]
library(ggplot2)
ggplot()+
geom_hline(aes(yintercept=1.301029996), lwd=1.5, color="aquamarine", lty="dotted")+
annotate("text", x = 5, y = 1.5, label = "p=0.05", color="aquamarine",size=6)+
geom_hline(aes(yintercept=3), lwd=1.5, color="springgreen", lty="dotted")+
annotate("text", x = 5, y = 3.2, label = "p=0.001", color="springgreen",size=6)+
geom_point(data=pValues, aes(x=Module, y=NegLog10P),size=3)+
geom_text(data=pValues, aes(x = Module ,y = NegLog10P, label=Module), hjust=-0.5, vjust=-0.25)+
# scale_y_continuous(limits=c(0,4))+
scale_x_continuous(limits=c(0,215))+
xlab("Module Number") +
ylab("-log10(p-value), BH-adjusted")+
ggtitle("Hypergeometric test p-value:")+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_line(colour = "grey20"),
axis.text = element_text(size = 12),
axis.ticks=element_blank())
})
output$assignment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
a <- S.class.subset.by.query
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
a$Affy.Probe.Set.ID <- rownames(a)
b <- merge(a,conversionTable, by="Affy.Probe.Set.ID")
b <- b[b$Affy.Probe.Set.ID==unique(b$Affy.Probe.Set.ID),]
rownames(b) <- b$Affy.Probe.Set.ID
b <- subset(b, select = -c(Affy.Probe.Set.ID, WormBase.ID, Sequence.ID, Public.Gene.Name))
moduleAssignment <- as.data.frame(t(b))
moduleAssignment$Module <- rownames(moduleAssignment)
moduleAssignment$Module <- gsub("^.{1}","", moduleAssignment$Module)
library(reshape2)
moduleAssignment.m <- melt(moduleAssignment, id.vars = "Module")
moduleAssignment.m$Module <- as.numeric(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[order(moduleAssignment.m$Module),]
moduleAssignment.m$Module <- as.factor(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[moduleAssignment.m$value!=0,]
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
colnames(moduleAssignment.m) <- c("Module","Affy.Probe.Set.ID","Hemi.module")
moduleAssignment.m <- merge(moduleAssignment.m, conversionTable, by="Affy.Probe.Set.ID")
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
n <- nlevels(moduleAssignment.m$Public.Gene.Name)
col <- rainbow(n)
assPlot <- moduleAssignment.m
library(ggplot2)
calc_height <-  function(f) length(levels(f))
ggplot()+
geom_hline(yintercept=0)+
geom_jitter(data=assPlot, aes(x=Affy.Probe.Set.ID, y= Hemi.module, color=Public.Gene.Name), position=position_jitter(width=0, height=0.1), alpha=0.8, size=2)+
xlab("") +
ylab("Assigned to (+) or (-) hemi-module)\n")+
ggtitle("Genes assigned to module number:")+
scale_y_continuous(breaks=seq(-1,1,1))+
scale_colour_manual(name = "Gene",values=col)+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
strip.background = element_rect(colour="white", fill="white"),
strip.text.x = element_text(size = 12))+
facet_wrap(~Module, ncol=5)
}
,height = 2400, width = 600
)
}
shinyApp(ui, server)
ui <- fluidPage(
h1("Assignment of genes to modules"),
h3(tags$div(
"Follow this link to learn more about each module:",
tags$br(),
a("Module Annotation Pages",
href = "http://10.11.14.33/modules/m1.html"))),
sidebarLayout(
sidebarPanel(textInput("text",
"Enter gene identifiers (these may be Affymetrix probeset IDs, gene names, cosmid IDs or a combination thereof)", value="", placeholder = "e.g. hsp-6, Y22D7AL.5a"
),
fileInput("file1",
"Or upload a text (.txt) file \n that contains gene identifiers in the first column",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")),
actionButton(inputId = "go", label = "Go")
),
mainPanel(tableOutput("query.genes"),
plotOutput("enrichment.plot"),
plotOutput("assignment.plot"))
)
)
server <- function(input, output) {
SUBSETTED <- eventReactive(input$go, {
query <- gsub("\\s", "", input$text) # input$text is a string; remove all types of white spaces
query <- strsplit(query,",")[[1]] # split this string based on "," and output the char. vector
if(length(query)==0){
inFile <- input$file1
query <- as.matrix(read.table(inFile$datapath, sep = "\t", header=F))
if (dim(query)[2]>=2){query <- as.character(query[,1])}
}
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
subsetted <- data.frame()
for (i in 1: length(query)){
if (nrow(subset(conversionTable, WormBase.ID ==query[i])) !=0)
{a <- subset(conversionTable, WormBase.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,a)
}
if (nrow(subset(conversionTable, Public.Gene.Name ==query[i])) !=0)
{b <- subset(conversionTable, Public.Gene.Name ==query[i])[,1:4]
subsetted <- rbind(subsetted,b)
}
if (nrow(subset(conversionTable, Sequence.ID ==query[i])) !=0)
{c <- subset(conversionTable, Sequence.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
if (nrow(subset(conversionTable, Affy.Probe.Set.ID ==query[i])) !=0)
{c <- subset(conversionTable, Affy.Probe.Set.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
}
subsetted <- droplevels.data.frame(subsetted)
subsetted <- unique.data.frame(subsetted)
})
output$query.genes <- renderTable({
query.genes <- SUBSETTED()
query.genes <- query.genes[,2:4]
colnames(query.genes) <- c("Gene", "Sequence","Probeset")
row.names(query.genes) <- NULL
query.genes
},
caption="Genes (i.e. unique probeset IDs) used in analysis",caption.placement = getOption("xtable.caption.placement", "top")
)
output$enrichment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
# Calculate the 4 parameters needed for hypergeometric test
hitInSamplePerMod <- sapply(S.class.subset.by.query, function(x) sum(abs(x)))
hitInPopPerMod <- sapply(S.class, function(x) sum(abs(x)))
failInPopPerMod <- sapply(S.class, function(x) nrow(S.class)-sum(abs(x)))
hypergeomTablePerMod <- as.data.frame(rbind(hitInSamplePerMod, hitInPopPerMod, failInPopPerMod))
# Perform hypergeometric test for enrichment of modules genes within the query gene list
# Arguments for phyper: phyper(hits in sample, hits in population, fails in population, sample size)
pValues <- as.data.frame(sapply(hypergeomTablePerMod, function(x)
phyper(x[1]-1, x[2], x[3], length(probeSets), lower.tail= FALSE)
))
colnames(pValues) <- "p_value"
# Adjust p-value due to multiple hypothesis testing
adj.pValues <- p.adjust(pValues[,1], "BH")
pValues$BH_p_value <- adj.pValues
# Format the p-value table for plotting
pValues$NegLog10P <- -log(pValues$BH_p_value,10)
pValues$Module <- rownames(pValues)
pValues$Module <- gsub("^.{1}","", pValues$Module)
pValues$Module <- as.numeric(pValues$Module)
pValues <- pValues[order(pValues$Module),]
library(ggplot2)
ggplot()+
geom_hline(aes(yintercept=1.301029996), lwd=1.5, color="aquamarine", lty="dotted")+
annotate("text", x = 5, y = 1.5, label = "p=0.05", color="aquamarine",size=6)+
geom_hline(aes(yintercept=3), lwd=1.5, color="springgreen", lty="dotted")+
annotate("text", x = 5, y = 3.2, label = "p=0.001", color="springgreen",size=6)+
geom_point(data=pValues, aes(x=Module, y=NegLog10P),size=3)+
geom_text(data=pValues, aes(x = Module ,y = NegLog10P, label=Module), hjust=-0.5, vjust=-0.25)+
# scale_y_continuous(limits=c(0,4))+
scale_x_continuous(limits=c(0,215))+
xlab("Module Number") +
ylab("-log10(p-value), BH-adjusted")+
ggtitle("Hypergeometric test p-value:")+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_line(colour = "grey20"),
axis.text = element_text(size = 12),
axis.ticks=element_blank())
})
output$assignment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
a <- S.class.subset.by.query
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
a$Affy.Probe.Set.ID <- rownames(a)
b <- merge(a,conversionTable, by="Affy.Probe.Set.ID")
b <- b[b$Affy.Probe.Set.ID==unique(b$Affy.Probe.Set.ID),]
rownames(b) <- b$Affy.Probe.Set.ID
b <- subset(b, select = -c(Affy.Probe.Set.ID, WormBase.ID, Sequence.ID, Public.Gene.Name))
moduleAssignment <- as.data.frame(t(b))
moduleAssignment$Module <- rownames(moduleAssignment)
moduleAssignment$Module <- gsub("^.{1}","", moduleAssignment$Module)
library(reshape2)
moduleAssignment.m <- melt(moduleAssignment, id.vars = "Module")
moduleAssignment.m$Module <- as.numeric(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[order(moduleAssignment.m$Module),]
moduleAssignment.m$Module <- as.factor(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[moduleAssignment.m$value!=0,]
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
colnames(moduleAssignment.m) <- c("Module","Affy.Probe.Set.ID","Hemi.module")
moduleAssignment.m <- merge(moduleAssignment.m, conversionTable, by="Affy.Probe.Set.ID")
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
n <- nlevels(moduleAssignment.m$Public.Gene.Name)
col <- rainbow(n)
assPlot <- moduleAssignment.m
library(ggplot2)
calc_height <-  function(f) length(levels(f))
ggplot()+
geom_hline(yintercept=0)+
geom_jitter(data=assPlot, aes(x=Affy.Probe.Set.ID, y= Hemi.module, color=Public.Gene.Name), position=position_jitter(width=0, height=0.1), alpha=0.8, size=2)+
xlab("") +
ylab("Assigned to (+) or (-) hemi-module)\n")+
ggtitle("Genes assigned to module number:")+
scale_y_continuous(breaks=seq(-1,1,1))+
scale_colour_manual(name = "Gene",values=col)+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
strip.background = element_rect(colour="white", fill="white"),
strip.text.x = element_text(size = 12))+
facet_wrap(~Module, ncol=5)
}
,height = 2400, width = 600
)
}
shinyApp(ui, server)
ui <- fluidPage(
h1("Assignment of genes to modules"),
h3(tags$div(
"Follow this link to learn more about each module:",
tags$br(),
a("Module Annotation Pages",
href = "http://10.11.14.33/modules/m1.html"))),
sidebarLayout(
sidebarPanel(textInput("text",
"Enter gene identifiers (these may be Affymetrix probeset IDs, gene names, cosmid IDs or a combination thereof)", value="", placeholder = "e.g. hsp-6, Y22D7AL.5a"
),
fileInput("file1",
"Or upload a text (.txt) file \n that contains gene identifiers in the first column",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")),
actionButton(inputId = "go", label = "Go")
),
mainPanel(tableOutput("query.genes"),
plotOutput("enrichment.plot"),
plotOutput("assignment.plot"))
)
)
server <- function(input, output) {
SUBSETTED <- eventReactive(input$go, {
query <- gsub("\\s", "", input$text) # input$text is a string; remove all types of white spaces
query <- strsplit(query,",")[[1]] # split this string based on "," and output the char. vector
if(length(query)==0){
inFile <- input$file1
query <- as.matrix(read.table(inFile$datapath, sep = "\t"))
if (dim(query)[2]>=2){query <- as.character(query[,1])}
}
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
subsetted <- data.frame()
for (i in 1: length(query)){
if (nrow(subset(conversionTable, WormBase.ID ==query[i])) !=0)
{a <- subset(conversionTable, WormBase.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,a)
}
if (nrow(subset(conversionTable, Public.Gene.Name ==query[i])) !=0)
{b <- subset(conversionTable, Public.Gene.Name ==query[i])[,1:4]
subsetted <- rbind(subsetted,b)
}
if (nrow(subset(conversionTable, Sequence.ID ==query[i])) !=0)
{c <- subset(conversionTable, Sequence.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
if (nrow(subset(conversionTable, Affy.Probe.Set.ID ==query[i])) !=0)
{c <- subset(conversionTable, Affy.Probe.Set.ID ==query[i])[,1:4]
subsetted <- rbind(subsetted,c)
}
}
subsetted <- droplevels.data.frame(subsetted)
subsetted <- unique.data.frame(subsetted)
})
output$query.genes <- renderTable({
query.genes <- SUBSETTED()
query.genes <- query.genes[,2:4]
colnames(query.genes) <- c("Gene", "Sequence","Probeset")
row.names(query.genes) <- NULL
query.genes
},
caption="Genes (i.e. unique probeset IDs) used in analysis",caption.placement = getOption("xtable.caption.placement", "top")
)
output$enrichment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
# Calculate the 4 parameters needed for hypergeometric test
hitInSamplePerMod <- sapply(S.class.subset.by.query, function(x) sum(abs(x)))
hitInPopPerMod <- sapply(S.class, function(x) sum(abs(x)))
failInPopPerMod <- sapply(S.class, function(x) nrow(S.class)-sum(abs(x)))
hypergeomTablePerMod <- as.data.frame(rbind(hitInSamplePerMod, hitInPopPerMod, failInPopPerMod))
# Perform hypergeometric test for enrichment of modules genes within the query gene list
# Arguments for phyper: phyper(hits in sample, hits in population, fails in population, sample size)
pValues <- as.data.frame(sapply(hypergeomTablePerMod, function(x)
phyper(x[1]-1, x[2], x[3], length(probeSets), lower.tail= FALSE)
))
colnames(pValues) <- "p_value"
# Adjust p-value due to multiple hypothesis testing
adj.pValues <- p.adjust(pValues[,1], "BH")
pValues$BH_p_value <- adj.pValues
# Format the p-value table for plotting
pValues$NegLog10P <- -log(pValues$BH_p_value,10)
pValues$Module <- rownames(pValues)
pValues$Module <- gsub("^.{1}","", pValues$Module)
pValues$Module <- as.numeric(pValues$Module)
pValues <- pValues[order(pValues$Module),]
library(ggplot2)
ggplot()+
geom_hline(aes(yintercept=1.301029996), lwd=1.5, color="aquamarine", lty="dotted")+
annotate("text", x = 5, y = 1.5, label = "p=0.05", color="aquamarine",size=6)+
geom_hline(aes(yintercept=3), lwd=1.5, color="springgreen", lty="dotted")+
annotate("text", x = 5, y = 3.2, label = "p=0.001", color="springgreen",size=6)+
geom_point(data=pValues, aes(x=Module, y=NegLog10P),size=3)+
geom_text(data=pValues, aes(x = Module ,y = NegLog10P, label=Module), hjust=-0.5, vjust=-0.25)+
# scale_y_continuous(limits=c(0,4))+
scale_x_continuous(limits=c(0,215))+
xlab("Module Number") +
ylab("-log10(p-value), BH-adjusted")+
ggtitle("Hypergeometric test p-value:")+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_line(colour = "grey20"),
axis.text = element_text(size = 12),
axis.ticks=element_blank())
})
output$assignment.plot <- renderPlot({
subsetted <- SUBSETTED()
probeSets <- as.vector(subsetted$Affy.Probe.Set.ID)
# Load the table wtih assignment of ProbeSets to each module
S.class<- read.table("S_matrix_classified_by_ann.txt",header = TRUE, row.names = 1)
S.class <- subset(S.class, select = -Representative.Public.ID )
# Subset the table by query genes
S.class.subset.by.query <- S.class[rownames(S.class) %in% probeSets, ]
a <- S.class.subset.by.query
conversionTable <- read.table(
"ID_CONVERSION_MASTERSHEET_manually_compiled.txt",
header = TRUE)
a$Affy.Probe.Set.ID <- rownames(a)
b <- merge(a,conversionTable, by="Affy.Probe.Set.ID")
b <- b[b$Affy.Probe.Set.ID==unique(b$Affy.Probe.Set.ID),]
rownames(b) <- b$Affy.Probe.Set.ID
b <- subset(b, select = -c(Affy.Probe.Set.ID, WormBase.ID, Sequence.ID, Public.Gene.Name))
moduleAssignment <- as.data.frame(t(b))
moduleAssignment$Module <- rownames(moduleAssignment)
moduleAssignment$Module <- gsub("^.{1}","", moduleAssignment$Module)
library(reshape2)
moduleAssignment.m <- melt(moduleAssignment, id.vars = "Module")
moduleAssignment.m$Module <- as.numeric(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[order(moduleAssignment.m$Module),]
moduleAssignment.m$Module <- as.factor(moduleAssignment.m$Module)
moduleAssignment.m <- moduleAssignment.m[moduleAssignment.m$value!=0,]
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
colnames(moduleAssignment.m) <- c("Module","Affy.Probe.Set.ID","Hemi.module")
moduleAssignment.m <- merge(moduleAssignment.m, conversionTable, by="Affy.Probe.Set.ID")
moduleAssignment.m <- droplevels.data.frame(moduleAssignment.m)
n <- nlevels(moduleAssignment.m$Public.Gene.Name)
col <- rainbow(n)
assPlot <- moduleAssignment.m
library(ggplot2)
calc_height <-  function(f) length(levels(f))
ggplot()+
geom_hline(yintercept=0)+
geom_jitter(data=assPlot, aes(x=Affy.Probe.Set.ID, y= Hemi.module, color=Public.Gene.Name), position=position_jitter(width=0, height=0.1), alpha=0.8, size=2)+
xlab("") +
ylab("Assigned to (+) or (-) hemi-module)\n")+
ggtitle("Genes assigned to module number:")+
scale_y_continuous(breaks=seq(-1,1,1))+
scale_colour_manual(name = "Gene",values=col)+
theme_bw()+
theme(
legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 12),
axis.text.x = element_blank(),
axis.ticks=element_blank(),
strip.background = element_rect(colour="white", fill="white"),
strip.text.x = element_text(size = 12))+
facet_wrap(~Module, ncol=5)
}
,height = 2400, width = 600
)
}
shinyApp(ui, server)
library(rsconnect)
rsconnect::deployApp("/Users/katiepodshivalova/Documents/Kenyon_Lab/Modules/Shiny_module_projection/Enrichment_analysis/")
library(devtools)
devtools::install_github("MPCary/DEXICA", build_vignettes = TRUE)
install.packages("moments")
devtools::install_github("MPCary/DEXICA", build_vignettes = TRUE)
install.packages("neuralnet")
devtools::install_github("MPCary/DEXICA", build_vignettes = TRUE)
browseVignettes("DEXICA")
? predictModules
